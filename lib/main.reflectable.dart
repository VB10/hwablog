// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'package:hwablog/core/services/base/reflect.dart' as prefix1;
import 'package:hwablog/core/services/base/rtest.dart' as prefix0;
import 'package:hwablog/core/services/base/todo.dart' as prefix2;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_builder_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.MyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r".A",
            7,
            0,
            const prefix0.MyReflectable(),
            const <int>[-1],
            null,
            null,
            -1,
            {
              r"noArguments": () => prefix0.A.noArguments,
              r"oneArgument": () => prefix0.A.oneArgument,
              r"optionalArguments": () => prefix0.A.optionalArguments,
              r"namedArguments": () => prefix0.A.namedArguments
            },
            {},
            {r"": (b) => (value) => b ? new prefix0.A(value) : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"arg0": 0,
              r"arg1": 1,
              r"arg1to3": 2,
              r"argNamed": 3,
              r"+": 1,
              r"[]": 1,
              r"[]=": 3,
              r"unary-": 0,
              r"~": 0,
              r"value": 0,
              r"value=": 1,
              r"f": 0,
              r"f=": 1,
              r"noArguments": 0,
              r"oneArgument": 1,
              r"optionalArguments": 2,
              r"namedArguments": 3
            })
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"arg0": (dynamic instance) => instance.arg0,
        r"arg1": (dynamic instance) => instance.arg1,
        r"arg1to3": (dynamic instance) => instance.arg1to3,
        r"argNamed": (dynamic instance) => instance.argNamed,
        r"+": (dynamic instance) => (x) => instance + x,
        r"[]": (dynamic instance) => (x) => instance[x],
        r"[]=": (dynamic instance) => (x, v) => instance[x] = v,
        r"unary-": (dynamic instance) => () => -instance,
        r"~": (dynamic instance) => () => ~instance,
        r"value": (dynamic instance) => instance.value,
        r"f": (dynamic instance) => instance.f
      },
      {
        r"value=": (dynamic instance, value) => instance.value = value,
        r"f=": (dynamic instance, value) => instance.f = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [4, 2, null],
        const [
          2,
          0,
          const [#z]
        ]
      ]),
  const prefix1.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"Todo",
            r".Todo",
            7,
            0,
            const prefix1.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r"": (b) => ({userId, id, title, completed}) => b
                  ? new prefix2.Todo(
                      userId: userId,
                      id: id,
                      title: title,
                      completed: completed)
                  : null,
              r"fromJson": (b) =>
                  (json) => b ? new prefix2.Todo.fromJson(json) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"toJson": 0,
              r"userId": 0,
              r"userId=": 1,
              r"id": 0,
              r"id=": 1,
              r"title": 0,
              r"title=": 1,
              r"completed": 0,
              r"completed=": 1
            }),
        new r.NonGenericClassMirrorImpl(
            r"A",
            r".A",
            7,
            1,
            const prefix1.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {r"": (b) => (a) => b ? new prefix1.A(a) : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"greater": 1,
              r"lessEqual": 1,
              r"a": 0
            })
      ],
      null,
      null,
      <Type>[prefix2.Todo, prefix1.A],
      2,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"toJson": (dynamic instance) => instance.toJson,
        r"userId": (dynamic instance) => instance.userId,
        r"id": (dynamic instance) => instance.id,
        r"title": (dynamic instance) => instance.title,
        r"completed": (dynamic instance) => instance.completed,
        r"greater": (dynamic instance) => instance.greater,
        r"lessEqual": (dynamic instance) => instance.lessEqual,
        r"a": (dynamic instance) => instance.a
      },
      {
        r"userId=": (dynamic instance, value) => instance.userId = value,
        r"id=": (dynamic instance, value) => instance.id = value,
        r"title=": (dynamic instance, value) => instance.title = value,
        r"completed=": (dynamic instance, value) => instance.completed = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [
          0,
          0,
          const [#userId, #id, #title, #completed]
        ]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
